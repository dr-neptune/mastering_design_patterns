#+TITLE: Other Behavioral Patterns

In this chapter we will look at 5 behavioral patterns:

- Interpreter
  - Give the ability to use an embedded little language inside of an application
- Strategy
  - Given multiple algorithms for a problem, decide which algorithm to use
- Memento
  - Add support for Undo and/or History in an application
- Iterator
  - Handle a container of objects and traverse the members one at a time with next semantics
- Template
  - Eliminate code redundancy by redefining certain parts of an algorithm without changing its structure

* Interpreter Pattern

The goal is to offer the right programming abstractions to the specialist, who is often not a programmer, to make them productive.

* Implementation

We will create an internal DSL to control a smart house.
The user is able to control things using a very simple event notation. An event has the form of
command -> receiver -> arguments
Not all events require arguments. Example:
open -> gate
increase -> boiler temperature -> 3 degrees


Before we code, we can define the grammar using Backus-Naur Form notation:

#+BEGIN_SRC backus-naur-form
event ::= command token receiver token arguments
word ::= a collection of one or more alphanumeric characters
token ::= ->
command ::= word+
receiver ::= word+
arguments ::= word+
#+END_SRC


#+BEGIN_SRC python :tangle boiler_interpreter.py
import pyparsing as pyp

# implement BNF
word = pyp.Word(pyp.alphanums)
token = pyp.Suppress("->")

command = pyp.Group(pyp.OneOrMore(word))
device = pyp.Group(pyp.OneOrMore(word))
argument = pyp.Group(pyp.OneOrMore(word))

event = command + token + device + pyp.Optional(token + argument)

class Boiler:
    def __init__(self):
        self.temperature = 83

    def __str__(self):
        return f"Boiler temperature: {self.temperature}"

    def increase_temperature(self, amount):
        print(f"Increasing the boiler's temperature by {amount} degrees (C)")
        self.temperature += amount

    def decrease_temperature(self, amount):
        print(f"Decreasing the boiler's temperature by {amount} degrees (C)")
        self.temperature -= amount


class Gate:
    def __init__(self):
        self.is_open = False

    def __str__(self):
        return "open" if self.is_open else "closed"

    def open(self):
        print("opening the gate")
        self.is_open = True

    def close(self):
        print("closing the gate")
        self.is_open = False


class Garage:
    def __init__(self):
        self.is_open = False

    def __str__(self):
        return "open" if self.is_open else "closed"

    def open(self):
        print("opening the garage")
        self.is_open = True

    def close(self):
        print("closing the garage")
        self.is_open = False


class AirCondition:
    def __init__(self):
        self.is_on = False

    def __str__(self):
        return "on" if self.is_on else "off"

    def turn_on(self):
        print("turning on the A/C")
        self.is_on = True

    def turn_off(self):
        print("turning off the A/C")
        self.is_on = False


class Heating:
    def __init__(self):
        self.is_on = False

    def __str__(self):
        return "on" if self.is_on else "off"

    def turn_on(self):
        print("turning on the Heat")
        self.is_on = True

    def turn_off(self):
        print("turning off the Heat")
        self.is_on = False


class Fridge:
    def __init__(self):
        self.temperature = 2

    def __str__(self):
        return f"fridge temperature: {self.temperature}"

    def increase_temperature(self, amount):
        print(f"increasing the fridge's temperature by {amount} degrees")
        self.temperature += amount

    def decrease_temperature(self, amount):
        print(f"decreasing the fridge's temperature by {amount} degrees")
        self.temperature -= amount

gate = Gate()
garage = Garage()
airco = AirCondition()
heating = Heating()
boiler = Boiler()
fridge = Fridge()


def main():
    tests = (
        "open -> gate",
        "close -> garage",
        "turn on -> air condition",
        "turn off -> heating",
        "increase -> boiler temperature -> 5 degrees",
        "decrease -> fridge temperature -> 2 degrees"
    )

    open_actions = {"gate": gate.open,
                    "garage": garage.open,
                    "air condition": airco.turn_on,
                    "heating": heating.turn_on,
                    "boiler temperature": boiler.increase_temperature,
                    "fridge temperature": fridge.increase_temperature}

    close_actions = {"gate": gate.close,
                    "garage": garage.close,
                    "air condition": airco.turn_off,
                    "heating": heating.turn_off,
                    "boiler temperature": boiler.decrease_temperature,
                    "fridge temperature": fridge.decrease_temperature}

    for t in tests:
        if len(event.parseString(t)) == 2:  # no argument
            cmd, dev = event.parseString(t)
            cmd_str, dev_str = " ".join(cmd), " ".join(dev)
            if "open" in cmd_str or "turn on" in cmd_str:
                open_actions[dev_str]()
            elif "close" in cmd_str or "turn off" in cmd_str:
                close_actions[dev_str]()
        elif len(event.parseString(t)) == 3:  # argument
            cmd, dev, arg = event.parseString(t)
            cmd_str, dev_str, arg_str = " ".join(cmd), " ".join(dev), " ".join(arg)
            num_arg = 0
            try:
                num_arg = int(arg_str.split()[0])  # extract the numeric part
            except ValueError as err:
                print(f"Expected number but got: {arg_str[0]}")
            if "increase" in cmd_str and num_arg > 0:
                open_actions[dev_str](num_arg)
            elif "decrease" in cmd_str and num_arg > 0:
                close_actions[dev_str](num_arg)

if __name__ == '__main__':
    main()
#+END_SRC

* Strategy

The strategy pattern promotes using multiple algorithms to solve a problem. It makes it possible to switch algorithms at runtime transparently.

Assume we are asked to implement an algorithm to check if all characters in a string are unique.

#+BEGIN_SRC python :tangle strategy.py
def pairs(seq):
    """
    return all neighbor pairs of a sequence
    """
    n = len(seq)
    for i in range(n):
        yield seq[i], seq[(i + 1) % n]


slow = 3
limit = 5
warning = "too bad, you picked the slow algorithm :^("

def allUniqueSort(s):
    if len(s) > limit:
        print(warning)
        time.sleep(slow)
    srtStr = sorted(s)
    for (c1, c2) in pairs(srtStr):
        if c1 == c2:
            return False
    return True


def allUniqueSet(s):
    if len(s) < limit:
        print(warning)
        time.sleep(slow)
    return True if len(set(s)) == len(s) else False

def allUnique(word, strategy):
    return strategy(word)


def main():
    # enter the word to be checked for character uniqueness
    # and choose the pattern that will be used
    while True:
        word = None
        while not word:
            word = input("Insert word (type quit to exit)> ")
            if word == "quit":
                print("bye")
                return
            strategy_picked = None
            strategies = {"1": allUniqueSet,
                          "2": allUniqueSort}
            while strategy_picked not in strategies.keys():
                strategy_picked = input("Choose strategy:\n[1] Use a set\n[2] Sort and pair")
                try:
                    strategy = strategies[strategy_picked]
                    print(f"allUnique({word}): {allUnique(word, strategy)}")
                except KeyError as err:
                    print(f"Incorrect Option: {strategy_picked}")

if __name__ == '__main__':
    main()
#+END_SRC

* Memento

Memento is a design pattern that helps us create a way to take a snapshot of the internal state of an object so that we can restore the object with it when needed.

It has 3 key components:
- Memento: A simple object that contains basic state storage and retrieval capabilities
- Originator: An object that gets and sets values of Memento instances
- Caretaker: An object that can store and retrieve all previously created Memento instances

Memento is usually used when you need to provide some sort of undo and redo capability for your users.
Another usage is the implementation of a UI dialog with Ok/Cancel buttons

* Implementation


#+BEGIN_SRC python :tangle memento.py
import pickle

class Quote:
    def __init__(self, text, author):
        self.text = text
        self.author = author

    def save_state(self):
        return pickle.dumps(self.__dict__)

    def restore_state(self, memento):
        previous_state = pickle.loads(memento)
        self.__dict__.clear()
        self.__dict__.update(previous_state)

    def __str__(self):
        return f"{self.text} - By {self.author}"


def main():
    print("Quote 1")
    q1 = Quote("A room without books is like a body without a soul.",
               "unknown author")
    print(f"\nOriginal Version:\n\t{q1}")
    q1_mem = q1.save_state()

    q1.author = "Marcus Tullius Cicero"
    print(f"\nAn author was found. Updating:\n\t{q1}")

    q1.restore_state(q1_mem)
    print(f"\nRestoring a previous version:\n\t{q1}")


    print("Quote 2")
    q2 = Quote("To be you in a world that is constantly trying to make you something else is the greatest accomplishment.",
               "Ralph Waldo Emerson")
    print(f"\nOriginal Version:\n\t{q2}")
    q2_mem1 = q2.save_state()
    # change the text
    q2.text = "To be yourself in a world that is constantly trying to make you something else is the greatest accomplishment."
    print(f"\nThe text was updated.\n\t{q2}")
    q2_mem2 = q2.save_state()
    q2.text = "To be yourself when the world is constantly trying to make you something else is the greatest accomplishment."
    print(f"\nThe text was updated again.\n\t{q2}")
    # restoring previous state (Undo)
    q2.restore_state(q2_mem2)
    print(f"\nWe had to restore the 2nd version, the correct one:\n\t{q2}")


if __name__ == '__main__':
    main()
#+END_SRC

* Iterator Pattern

Iterator is a design pattern in which an iterator is used to traverse a container and access the container's elements. The iterator pattern
decouples algorithms from containers; in some cases, algorithms are necessarily container specific and thus cannot be decoupled.

Iterator is already heavily embedded in Python. Most of the built-in containers (list, tuple, set, string, etc) are iterable. The iter() function,
which in turn calls the __iter__() method, returns an iterator from them.

#+BEGIN_SRC python :tangle iterator.py
class FootballTeamIterator:
    def __init__(self, members):
        self.members = members
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        """Go through all the members and return them one by one until we reach the end"""
        if self.index < len(self.members):
            val = self.members[self.index]
            self.index += 1
            return val
        else:
            raise StopIteration()


class FootballTeam:
    def __init__(self, members):
        self.members = members

    def __iter__(self):
        return FootballTeamIterator(self.members)


def main():
    members = [f"player{str(x)}" for x in range(1, 23)] + ["coach1", "coach2", "coach3"]
    team = FootballTeam(members)
    team_iter = iter(team)

    while True:
        print(next(team_iter))


if __name__ == '__main__':
    main()
#+END_SRC

* Template Pattern

The template pattern focuses on eliminating code redundancy.

* Implementation

We will implement a banner generator. We want to send some text to a function, and the function should generate a banner containing the text.

#+BEGIN_SRC python :tangle template.py
from cowpy import cow

def generate_banner(msg, style):
    print("--- start of banner ---")
    print(style(msg))
    print("--- end of banner ---nn")

def dots_style(msg):
    msg = msg.capitalize()
    msg = "." * 10 + msg + "." * 10
    return msg

def admire_style(msg):
    msg = msg.upper()
    return "!".join(msg)

def cow_style(msg):
    msg = cow.milk_random_cow(msg)
    return msg

def main():
    msg = "happy coding"
    [generate_banner(msg, style) for style in (dots_style, admire_style, cow_style)]


if __name__ == '__main__':
    main()
#+END_SRC
