#+TITLE: Other Structural Patterns

from enum import Enum


In this chapter, we will discuss the following structural patterns:
- The flyweight pattern
  Helps developers minimize memory usage by sharing resources with similar objects as much as possible
- The MVC pattern
  Helps developers improve the maintainability of their applications by avoiding mixing business logic with the user interface
- The Proxy Pattern
  When we want to execute one or more important actions before accessing an object

* The Flyweight Pattern

The GoF book lists the following requirements for effectively using the flyweight pattern:

- The application needs to use a large number of objects
- There are enough objects that it is expensive to store/render them. Once the mutable state is removed, many groups of distinct objects can be replaced by relatively few shared objects
- Object identity is not important for the application. We cannot rely on object identity because object sharing causes identity comparisons to fail (objects that appear different to the client code end up having the same identity).

* Implementation

Memoization is an optimization technique that uses a cache to avoid recomputing results that were already computed in an earlier execution step. Flyweight is an OOP specific (unlike memoization) optimization design pattern that focuses on sharing object data.

#+BEGIN_SRC python :tangle flyweight.py
import random
from enum import Enum

CarType = Enum('CarType', 'subcompact compact suv')

class Car:
    # object pool (cache)
    pool = dict()

    def __new__(cls, car_type):
        '''
        Called before init. Converts the Car class to a metaclass that supports self-references
        '''
        # check if type of car has already been created. If so, return the previously created object%>%
        obj = cls.pool.get(car_type, None)
        if not obj:
            obj = object.__new__(cls)
            cls.pool[car_type] = obj
            obj.car_type = car_type
        return obj

    def render(self, color, x, y):
        print(f'render a car of type {self.car_type} and color {color} at ({x}, {y})')

def main():
    rnd = random.Random()
    colors = 'white black silver gray red blue brown beige yellow green'.split()
    min_point, max_point = 0, 100
    car_counter = 0

    for _ in range(10):
        c1 = Car(CarType.subcompact)
        c1.render(random.choice(colors),
                  rnd.randint(min_point, max_point),
                  rnd.randint(min_point, max_point))
        car_counter += 1

    for _ in range(3):
        c2 = Car(CarType.compact)
        c2.render(random.choice(colors),
                  rnd.randint(min_point, max_point),
                  rnd.randint(min_point, max_point))
        car_counter += 1

    for _ in range(5):
        c3 = Car(CarType.suv)
        c2.render(random.choice(colors),
                  rnd.randint(min_point, max_point),
                  rnd.randint(min_point, max_point))
        car_counter += 1

    print(f'cars rendered: {car_counter}')
    print(f'cars created: {len(Car.pool)}')

    c4, c5, c6 = Car(CarType.subcompact), Car(CarType.subcompact), Car(CarType.suv)
    print(f'{id(c4)} == {id(c5)}?')
    print(f'{id(c5)} == {id(c6)}?')


if __name__ == '__main__':
    main()
#+END_SRC

* The Model View Controller Pattern

MVC is considered an architectural pattern rather than a design pattern.

The *model* is the core component. It represents knowledge. It contains and manages the business logic, data, state, and rules of an application.
The *view* is a visual representation of the model. It encompasses things like a gui, text output, a pdf doc, a chart, etc
The *controller* is the link/glue between the model and view. All communication between the model and view happens through a controller. Can handle many views without modifying the model.

* Implementation

We will implement MVC using a quote printer as an example. The user enters a number and sees the quote related to that number.

#+BEGIN_SRC python :tangle mvc.py
quotes = (
    'A man is not complete until he is married. Then he is finished.',
    'As I said before, I never repeat myself.',
    'Behind a successful man is an exhausted woman.',
    'Black holes really suck...',
    'Facts are stubborn things.'
)


class QuoteModel:
    '''
    The model for the quote system
    '''
    def get_quote(self, n):
        try:
            value = quotes[n]
        except IndexError as err:
            value = 'Not Found!'
        return value


class QuoteTerminalView:
    '''
    The front end, or view
    '''
    def show(self, quote):
        print(f'The quote is:\t "{quote}"')

    def error(self, msg):
        print(f'Error:\t{msg}')

    def select_quote(self):
        return input('Which quote number would you like to see? ')


class QuoteTerminalController:
    '''
    The glue that pulls the model and the view together
    '''
    def __init__(self):
        self.model = QuoteModel()
        self.view = QuoteTerminalView()

    def run(self):
        valid_input = False
        while not valid_input:
            try:
                n = self.view.select_quote()
                n = int(n)
                valid_input = True
            except ValueError as err:
                self.view.error(f'Incorrect index "{n}"')
        quote = self.model.get_quote(n)
        self.view.show(quote)


def main():
    controller = QuoteTerminalController()
    while True:
        controller.run()


if __name__ == '__main__':
    main()
#+END_SRC

* The Proxy Pattern

There are 4 well known proxy types:
- A *remote proxy*, which acts as the local representation of an object that really exists in a different address space (for example, a network server)
- A *virtual proxy*, which uses lazy initialization to defer the creation of a computationally expensive object until the moment it is actually needed
- A *protection/protective* proxy, which controls access to a sensitive object
- A *smart (reference) proxy*, which performs extra actions when an object is accessed. Examples of such actions are reference counting and thread-safety checks

#+BEGIN_SRC python :tangle lazyproperty.py
class LazyProperty:
    def __init__(self, method):
        self.method = method
        self.method_name = method.__name__
        print(f'function overridden: {self.method}')
        print(f'functions name: {self.method_name}')

    def __get__(self, obj, cls):
        if not obj:
            return None
        value = self.method(obj)
        print(f"value {value}")
        setattr(obj, self.method_name, value)
        return value


# there are 3 attributes: x, y, and _resource. We want _resource to be loaded lazily, so we initialize it to None
class Test:
    def __init__(self):
        self.x = 'foo'
        self.y = 'bar'
        self._resource = None

    @LazyProperty
    def resource(self):
        print(f'Initializing self._resource: {self._resource}')
        self._resource = tuple(range(5))
        return self._resource


def main():
    t = Test()
    print(t.x)
    print(t.y)
    # do more work
    print(t.resource)
    print(t.resource)


if __name__ == '__main__':
    main()
#+END_SRC

* Implementation

We will implement a simple protection proxy to view and add users. The service provides two options:

- Viewing the list of users
  - Doesn't require special priveleges
- Adding a new user
  - Requires the client to provide a secret message

#+BEGIN_SRC python :tangle proxy2.py
class SensitiveInfo:
    def __init__(self):
        self.users = ['knick', 'knack', 'patty', 'whack']

    def read(self):
        nb = len(self.users)
        print(f"There are {nb} users: {' '.join(self.users)}")

    def add(self, user):
        self.users.append(user)
        print(f"Added user {user}")


class Info:
    '''Protection proxy to SensitiveInfo'''
    def __init__(self):
        self.protected = SensitiveInfo()
        self.secret = '0x0x'

    def read(self):
        self.protected.read()

    def add(self, user):
        sec = input('What is the secret? ')
        self.protected.add(user) if sec == self.secret else print('Not quite')


def main():
    info = Info()
    while True:
        print('1. read list |==| 2. add user |==| 3. quit')
        key = input('choose option: ')
        if key == '1':
            info.read()
        elif key == '2':
            name = input('choose username: ')
            info.add(name)
        elif key == '3':
            exit()
        else:
            print(f'unknown option: {key}')


if __name__ == '__main__':
    main()
#+END_SRC
