#+TITLE: The Bridge Pattern

The bridge pattern is designed up-front to decouple an implementation from its abstraction.

Using the bridge pattern is a good idea when you want to share an implementation among multiple objects. Instead of defining several specialized classes,
we can define the following specialized components:

- an abstraction that applies to all the classes
- A separate interface for the different objects involved

* Implementation

Let's assume we are building an application where the user is going to manage and deliver content after fetching it from diverse sources,
which could be:

- A web page (based on its URL)
- A resource accessed on an FTP server
- A file on the local file system
- A database server

Instead of implementing several content classes, each holding the methods responsible for getting the content pieces, assembling them, and showing them inside the application, we can define an abstraction for the Resource Content and a separate interface for the objects that are responsible for fetching the content.

#+BEGIN_SRC txt :tangle file.txt
hello, world!
#+END_SRC

#+BEGIN_SRC python :tangle bridge.py
import abc
import urllib.request


# implement the interface for implementation classes that help fetch content
class ResourceContent:
    '''
    Define the abstration's interface.
    Maintain a reference to an object which represents the Implementor
    '''
    def __init__(self, imp):
        self._imp = imp

    def show_content(self, path):
        self._imp.fetch(path)


# interface for resourcecontentfetcher
class ResourceContentFetcher(metaclass=abc.ABCMeta):
    '''Defines the interface for implementation classes that fetch content'''
    @abc.abstractmethod
    def fetch(path):
        pass


class URLFetcher(ResourceContentFetcher):
    '''
    Implement the Implementor interface and define its concrete implementation
    '''
    def fetch(self, path):
        # path is a URL
        req = urllib.request.Request(path)
        with urllib.request.urlopen(req) as response:
            if response.code == 200:
                the_page = response.read()
                print(the_page)


class LocalFileFetcher(ResourceContentFetcher):
    '''
    Implement the Implementor interface and define its concrete implementation
    '''
    def fetch(self, path):
        # path is the filepath to a text file
        with open(path) as f:
            print(f.read())


def main():
    url_fetcher = URLFetcher()
    iface = ResourceContent(url_fetcher)
    iface.show_content('https://python.org')
    print('===============================')
    localfs_fetcher = LocalFileFetcher()
    iface = ResourceContent(localfs_fetcher)
    iface.show_content('file.txt')


if __name__ == '__main__':
    main()
#+END_SRC
