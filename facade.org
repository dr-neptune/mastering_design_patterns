#+TITLE: The Facade Pattern

The facade pattern helps us hide the internal complexity of our systems and expose only what is necessary to the client through a simplified interface.
In essence, facade is an abstraction layer implemented over an existing complex system.

* Use Cases

The most usual reason to use the facade pattern is for providing a single, simple entry point to a complex system.
Facade is also useful if you have more than one layer in your system. You can introduce one facade entry point per layer, and let all layers communicate
with each other through their facades. That promotes loose coupling and keeps the layers as independent as possible.

* Implementation

Suppose we want to create an operating system using a multi-server approach, similar to minix-3 or gnu hurd.
A multiserver OS has a minimal kernel, called the microkernel, which runs in priveleged mode. All the other services of the system are following a
server architecture (driver server, process server, file server, and so forth). Each server belongs to a different memory address space and runs on top
of the microkernel in user mode.

The pros of this approach are that the operating system can become more fault-tolerant, reliable, and secure.
For example, a bug in drivers won't bring down the system.
The cons of this approach are the performance overhead and the complexity of systems programming. The communication between the servers happens
using message passing, which is more complex than the shared memory model used in monolithic kernels like Linux.

#+BEGIN_SRC python :tangle facade.py
from abc import ABCMeta, abstractmethod
from enum import Enum

# A Server Interface
State = Enum('State', 'new running sleeping restart zombie')

class Server(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self):
        pass

    def __str__(self):
        return self.name

    @abstractmethod
    def boot(self):
        pass

    @abstractmethod
    def kill(self, restart=True):
        pass


# make different servers
class FileServer(Server):
    def __init__(self):
        '''actions required for initializing the file server'''
        self.name = 'FileServer'
        self.state = State.new

    def boot(self):
        '''actions required for booting the file server'''
        print(f'Booting the {self}')
        self.state = State.running

    def kill(self, restart=True):
        '''actions required for killing the file server'''
        print(f'Killing the {self}')
        self.state = State.restart if restart else State.zombie

    def create_file(self, user, name, permissions):
        '''check validity of permissions, user rights, etc.'''
        print(f'Trying to create the file "{name}" for user "{user}" with permissions {permissions}')


class ProcessServer(Server):
    def __init__(self):
        '''actions required for initializing the process server'''
        self.name = 'ProcessServer'
        self.state = State.new

    def boot(self):
        '''actions required for booting the process server'''
        print(f'Booting the {self}')
        self.state = State.running

    def kill(self, restart=True):
        '''actions required for killing the process server'''
        self.state = State.restart if restart else State.zombie

    def create_process(self, user, name):
        '''check user rights, generate PID, etc'''
        print(f'Trying to create the process "{name}" for user "{user}"')


# The OperatingSystem class is a facade
class OperatingSystem:
    '''The Facade'''
    def __init__(self):
        self.fs = FileServer()
        self.ps = ProcessServer()

    def start(self):
        [i.boot() for i in (self.fs, self.ps)]

    def create_file(self, user, name, permissions):
        return self.fs.create_file(user, name, permissions)

    def create_process(self, user, name):
        return self.ps.create_process(user, name)


def main():
    os = OperatingSystem()
    os.start()
    os.create_file('foo', 'hello', '-rw-r-r')
    os.create_process('bar', 'ls /tmp')


if __name__ == '__main__':
    main()
#+END_SRC
