#+TITLE: The Adapter Pattern

The next category of patterns we will look at are structural design patterns (as opposed to creational patterns).
A structural design pattern proposes a way of computing objects for creating new functionality.

The adapter pattern is a structural design pattern that helps us make two incompatible interfaces compatible.

* Use Cases

Usually, one of the two incompatible interfaces is either foreign or old/legacy. If the interface is foreign, it means that we have no access to the source code. If it is old, it is usually impractical to refactor it.

* Implementation

We will look at a simple application to illustrate adaptation: a club's activities. Mainly, the need to organize performances and events for the entertainment of clients by hiring artists.

#+BEGIN_SRC python :tangle club_organization.py
# client code
class Club:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return f"the club {self.name}"

    def organize_event(self):
        return "hires an artist to perform for the people"


# musician and dancer are external 3rd party objects
class Musician:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return f"the musician {self.name}"

    def play(self):
        return "plays music"


class Dancer:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return f"the dancer {self.name}"

    def dance(self):
        return "does a dance performance"


# create a generic adapter class that allows us to adapt a number of ojbects with different interfaces
class Adapter:
    def __init__(self, obj, adapted_methods):
        """
        obj is the object we want to adapt
        adapted_methods is a dict containing key value pairs matching the method the client calls and the
        method that should be called
        """
        self.obj = obj
        self.__dict__.update(adapted_methods)

    def __str__(self):
        return str(self.obj)


def main():
    objects = [Club("Jazz Cafe"), Musician("Roy Ayers"), Dancer("Shane Sparks")]
    for obj in objects:
        if hasattr(obj, "play") or hasattr(obj, "dance"):
            if hasattr(obj, "play"):
                adapted_methods = dict(organize_event=obj.play)
            elif hasattr(obj, "dance"):
                adapted_methods = dict(organize_event=obj.dance)
            obj = Adapter(obj, adapted_methods)
        print(f"{obj} {obj.organize_event()}")

if __name__ == '__main__':
    main()
#+END_SRC
