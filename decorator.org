#+TITLE: The Decorator Pattern

You can adapt an object implementing a given interface to implement another interface. This is called interface adaptation and includes the kinds of patterns that encourage composition over inheritance.

The *decorator* pattern allows a programmer to add responsibilities to an object dynamically. A python decorator is a *callable* (function, method, class) that gets a function object func_in as input, and returns another function object func_out.

* Use Cases

The decorator pattern shines when used for implementing cross-cutting concerns. Examples of cross-cutting concerns are:
- data validation
- caching
- logging
- monitoring
- debugging
- business rules
- encryption

* Implementation

In this section, we will see how we can implement a memoization decorator.

#+BEGIN_SRC python :tangle numbah_sum.pyxp
sum_cache = {0:0}

def number_sum(n):
    '''returns the sum of the first n numbers'''
    assert(n >= 0), 'n must be >= 0'
    if n in sum_cache:
        return sum_cache[n]
    res = n + number_sum(n-1)
    # add the value to the cache
    sum_cache[n] = res
    return res

if __name__ == '__main__':
    from timeit import Timer
    t = Timer('number_sum(300)', 'from __main__ import number_sum')
    print('Time: ', t.timeit())
#+END_SRC

In order to generalize this without cluttering up global with errant dicts, we can make a decorator

#+BEGIN_SRC python :tangle numbah_sum_memo.py
import functools

def memoize(fn):
    cache = dict()

    @functools.wraps(fn)
    def memoizer(*args):
        if args not in cache:
            cache[args] = fn(*args)
        return cache[args]

    return memoizer


@memoize
def number_sum(n):
    '''returns the sum of the first n numbers'''
    assert(n >= 0), 'n must be >= 0'
    if n == 0:
        return 0
    else:
        return n + number_sum(n-1)


@memoize
def fibonacci(n):
    '''Returns the suite of Fibonacci numbers'''
    assert(n >= 0), 'n must be >= 0'
    if n in (0, 1):
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)


def main():
    from timeit import Timer

    to_execute = [
        (number_sum,
         Timer('number_sum(300)',
               'from __main__ import number_sum')),
        (fibonacci,
         Timer('fibonacci(100)',
               'from __main__ import fibonacci'))
    ]

    for item in to_execute:
        fn = item[0]
        print(f'Function "{fn.__name__}": {fn.__doc__}')
        t = item[1]
        print(f'Time: {t.timeit()}')


if __name__ == '__main__':
    main()
#+END_SRC
